stages:
  - build
  - pre-deploy-tests
  - push
  - deploy-staging
  - functional-tests
  - deploy-production

image:
  name: registry.gitlab.com/mesonomics/meso-alert/ci
  entrypoint: [""]

unit-tests:
  stage: pre-deploy-tests
  script:
    - make sbt-unit-tests

functional-tests:
  stage: functional-tests
  script:
    - sh meso-alert-ci-config.sh
    - make -e sbt-functional-tests

scalafix:
  stage: pre-deploy-tests
  script:
    - make sbt-scalafix-check

docker:
  stage: push
  script:
    - echo "POSTGRES_PORT=5432" > docker/.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - make -e sbt-build
    - cd docker
    - docker-compose up --no-start --build meso-alert
    - cd ..
    - docker push registry.gitlab.com/mesonomics/meso-alert/play-server
  only:
    - master

k8-staging:
  stage: deploy-staging
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config use-context mesonomics/meso-alert:meso-alert-k8agent
    - kubectl apply -f k8/staging/sealed-secrets.yaml
    - kubectl apply -f k8/staging/meso-alert-service.yaml
    - kubectl apply -f k8/staging/postgres-pv.yaml
    - kubectl apply -f k8/postgres.yaml
    - kubectl apply -f k8/web-application.yaml
    - kubectl rollout restart deployment/meso-alert-deployment
  only:
    - master
  environment:
    name: staging

k8-production:
  stage: deploy-production
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config use-context mesonomics/meso-alert:digitalocean-production
    - kubectl apply -f k8/production/sealed-secrets.yaml
    - kubectl apply -f k8/production/meso-alert-service.yaml
    - kubectl apply -f k8/production/postgres-pv.yaml
    - kubectl apply -f k8/postgres.yaml
    - kubectl apply -f k8/web-application.yaml
    - kubectl rollout restart deployment/meso-alert-deployment
  only:
    - master
  when: manual
  environment:
    name: production
